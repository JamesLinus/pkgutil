#!/usr/bin/env perl -w

# setup - helps setup pkgutil
# Copyright (C) 2011 Peter Bonivart

# $Id$

# Automatically output to stdout for copy'n'paste or redirect.

use strict;

my @conf;
my $prompt;

## General
# Explain default.

print "Start of configuration ...\n";

# Start of options

query("catalog_not_cached","The catalog_not_cached option tells your proxy server to disable\ncaching during fetching of the catalog and descriptions.","boolean","true");

query("catalog_update","The catalog_update option is the number of days between automatic catalog updates. Special cases are -1\nif you want to disable automatic updates and 0 if you always want to update the catalog.","numeric","14");

query("deptree_filter_common","Filter out CSWcommon from --deptree output. Set this to true if you don't want to see lots of lines with CSWcommon.","boolean","false");

query("exclude_pattern","Exclude pattern. Space separated list of simple patterns that will exclude matching packages when updating or installing.","string","");

query("gpg_homedir","gpg homedir. The path to the gpg directory (instead of ~/.gnupg) when verifying the catalogs integrity.","string","");

query("maxpkglist","Max package list length. During dependency calculation the recursive algorithm needs to be protected against cyclic dependencies in the catalog (packages that list each other as dependencies) or pkgutil will not stop until memory is exhausted.","numeric","100000");

##### THIS IS A SPECIAL CASE #####
# Allow for multiple mirrors
# Select from a list
query("mirror","Mirror to use for downloads. See http://www.opencsw.org/mirrors for alternative mirrors. NOTE: remember to include distribution (e.g. unstable) at the end of the url.","string","http://mirror.opencsw.org/opencsw/unstable");

query("noncsw","Support non-CSW packages. If you have your own packages that have a different prefix that you want to use with pkgutil you must enable this otherwise pkgutil will skip every package not prefixed by CSW.","boolean","false");

query("pkgaddopts","Options to use for pkgadd. You can set it to -S to skip displaying the license during install. Solaris 10: If you wish to limit pkgutil to installing packages only to the global zone, set it to -G. Note that pkgrm does not have the same option. WARNING: do not modify this unless you know what you're doing.","string","-S");

query("pkgliststyle","Style of package list when installing/upgrading packages. 0 is the one used since the first version of pkgutil, it's space efficient but less readable. 1 is the one introduced in v1.7, it's one package per line which is easierto read. 2 is the same as 1 but also displays which distribution a package comes from, e.g. unstable or stable.","numeric","2");

query("root_path","Root path to use. WARNING: do not modify this unless you know what you're doing.","string","/");

query("show_current","Show the current list of packages or not. You can choose to not show the list of current packages to get less output when doing operations.","boolean","true");

query("stop_on_hook_soft_error","How to handle soft errors from hooks that are called. A hook that exits with code 1 will cause pkgutil to stop. If this value is true, exit code 2 will also cause pkgutil to stop. Exit code 2 is a non-fatal error condition from a hook and it is a site dependent choice whether or not to honour this condition. Set to true to enable.","boolean","false");

query("use_gpg","Use of gpg, md5. To enable use of gpg or md5, uncomment these. NOTE: it doesn't make sense to use md5 but not gpg so your options should be: 1. both disabled, 2. gpg enabled, 3. both enabled.","boolean","false");

query("use_md5","Use of gpg, md5. To enable use of gpg or md5, uncomment these. NOTE: it doesn't make sense to use md5 but not gpg so your options should be: 1. both disabled, 2. gpg enabled, 3. both enabled.","boolean","false");

query("wgetopts","Options to use for wget. E.g. -nv for less verbose or -q for quiet. You can also use any option from wgetrc with --execute, e.g. --execute http_proxy=http://proxy.foo.bar. WARNING: do not modify this unless you know what you're doing.","string","");

# End of options

print "\nEnd of configuration ...\n";

print "\nYour configuration:\n\n";
print join("\n",@conf);
print "\n";

# Query
sub query {
  my ($option,$description,$type,$default) = @_;

  # Heading
  print "\n=== $option ===";

  # Description
  print "\n$description\n";

  # Prompt
  ### Show more options than default, for at least boolean ###
  print "\nSetting for $option [$default] ";

  # Read value
  undef $prompt;
  chomp($prompt = <STDIN>);
  $prompt = "$default" unless $prompt;

  ### Add evaluation code here ###

  push(@conf,"$option=$prompt");
}
