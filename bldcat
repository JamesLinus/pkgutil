#!/usr/bin/env perl -w

# bldcat - build a CSW catalog from packages in a directory
# Copyright (C) 2008-2012 Peter Bonivart

# $Id$

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA.
#
# The author, Peter Bonivart, can be contacted by email at bonivart@opencsw.org

use strict;
use Getopt::Long;
Getopt::Long::Configure qw(no_ignore_case bundling);

eval { require Digest::MD5; };
die
"\nDigest::MD5 not available! Install CSWperl and use that\nfor bldcat. Do that by having /opt/csw/bin before\n/usr/bin in your path.\n"
  if ($@);

eval { require File::Temp; };
die
"\nFile::Temp not available! Install CSWperl and use that\nfor bldcat. Do that by having /opt/csw/bin before\n/usr/bin in your path.\n"
  if ($@);

my $dir    = "/var/tmp";
my $pkgdir = ".";
my ( $deptmp, $status, $pkgname, $ideptmp );
my (
    $name,  $description, $common, $version,  $package, $pkgfile,
    $hash,  $size,        $deps,   $category, $help,    $fast,
    $ideps, $sizeCatalog, $quiet,  @parameter
);
my %oldcatalog;
my %oldcatalog_bypkgfile;
my %olddescriptions;
my $format = 9;

GetOptions(
    "h|help"      => \$help,
    "F|fast"      => \$fast,
    "W|workdir=s" => \$dir,
    "q|quiet"     => \$quiet,
    "p|param=s"   => \@parameter,
    "f|format=s"  => \$format
) || usage();

usage() if $help;
if ( scalar(@ARGV) > 0 ) {
    $pkgdir = $ARGV[0];
    ($pkgdir) = ( $pkgdir =~ /^(.+)\/$/ ) if ( $pkgdir =~ /\/$/ );
}
else {
    usage();
}

$format = 9 if ( $format != 8 );

sub usage {
    print <<EOF;
bldcat, build CSW catalogs.

Usage: bldcat [-fFWpqh] <package dir>

  -f, --format=x\tSet catalog format (8,[9])
  -F, --fast\t\tUse fast mode
  -W, --workdir=x\tSet work directory (default: /var/tmp)
  -p, --param=x\t\tAdd parameter, e.g. timestamp
  -q, --quiet\t\tNo output
  -h, --help\t\tShow this help

Written and maintained by Peter Bonivart.
EOF
    exit 0;
}

if ( open( my $CATALOG, '<', "$pkgdir/catalog" ) ) {
    while (<$CATALOG>) {
        chomp;
        my @line = split /\s+/;
        if ( scalar(@line) >= 8 && $_ =~ /^\w/ ) {
            my $hash = $line[4];
            $oldcatalog{$hash} = \@line;
            my $pkgfile = $line[3];
            $oldcatalog_bypkgfile{$pkgfile} = \@line;
        }
    }
    close $CATALOG;
}

if ( open( my $DESCRIPTIONS, '<', "$pkgdir/descriptions" ) ) {
    while (<$DESCRIPTIONS>) {
        chomp;
        my @line   = split /\s+/;
        my $common = $line[0];
        $olddescriptions{$common} = $_;
    }
    close $DESCRIPTIONS;
}

open( my $CATALOG, '>', "$pkgdir/catalog.new" )
  || die "Could not write new catalog at $pkgdir/catalog.new: $!";
open( my $DESCRIPTIONS, '>', "$pkgdir/descriptions.new" )
  || die "Could not write new descriptions at $pkgdir/descriptions.new: $!";

# Add site features
if ( scalar(@parameter) > 0 ) {
    foreach my $param (@parameter) {
        if ( $param eq "timestamp" ) {
            my ( $sec, $min, $hour, $mday, $mon, $year, $wday, $yday, $isdst ) =
              gmtime(time);
            printf $CATALOG (
                "# CREATIONDATE %d-%02d-%02dT%02d:%02d:%02dZ\n",
                $year + 1900,
                $mon + 1, $mday, $hour, $min, $sec
            );
            next;
        }

        # Add generic site feature to catalog (e.g. RELEASE testing)
        my ( $key, $value ) = ( $param =~ /(.*):(.*)/ );
        print $CATALOG "# $key $value\n";
    }
}

foreach my $file ( glob "$pkgdir/*" ) {
    (
        $common, $version, $package,  $pkgfile, $hash,
        $size,   $deps,    $category, $ideps
    ) = ( "", "", "", "", "", "", "", "", "" );
    next unless ( -r $file );                    # Must be a readable file
    next unless ( $file =~ /\.pkg(\.gz)?$/ );    # Must end with .pkg or .pkg.gz

    # Get size of file and from catalog
    $size = ( stat($file) )[7];
    $sizeCatalog = $oldcatalog_bypkgfile{ ( split( /\//, $file ) )[-1] }[5];

    if ( $fast && defined $sizeCatalog && $size == $sizeCatalog ) {

        # When using fastmode we reuse a checksum from the catalog if the
        # filename matches. If there was no entry in the catalog $hash will
        # stay undefined
        $hash = $oldcatalog_bypkgfile{ ( split( /\//, $file ) )[-1] }[4];
    }

    # Calculate hash before we do anything else to look up the cache
    if ( !$hash ) {
        open( my $FILE2, '<', "$file" ) || die "Could not open $file: $!\n";
        binmode($FILE2);
        $hash = Digest::MD5->new->addfile(*$FILE2)->hexdigest;
        close $FILE2;
    }

    if (   exists $oldcatalog{$hash}
        && exists $olddescriptions{ $oldcatalog{$hash}[0] } )
    {
        print "Reusing old information for $file" unless $quiet;

        # Has the filename changed even though the hash is the same?
        ($pkgfile) = ( $file =~ /\// ) ? ( $file =~ /.*\/(.+)$/ ) : $file;
        my $filenameCatalog = $oldcatalog{$hash}[3];
        if ( $pkgfile eq $filenameCatalog ) {
            print "\n" unless $quiet;
            print $CATALOG join( ' ', @{ $oldcatalog{$hash} } ), "\n";
        }
        else {
            print " (filename changed)\n" unless $quiet;
            my @tmplist = @{ $oldcatalog{$hash} };
            $tmplist[3] = $pkgfile;
            print $CATALOG join( ' ', @tmplist ), "\n";
        }
        print $DESCRIPTIONS $olddescriptions{ $oldcatalog{$hash}[0] }, "\n";
        next;
    }

    print "Inspecting $file\n" unless $quiet;

    # Unpack package
    my $tmpdir = File::Temp::tempdir( DIR => $dir, CLEANUP => 1 );
    my $DECOMPRESS =
      ( $file =~ /\.gz$/ ? "/bin/gzip -c -d $file" : "cat $file" );
    $status =
      system("$DECOMPRESS | /bin/pkgtrans /dev/fd/0 $tmpdir all 2> /dev/null");
    die "Could not transform $file (file system full/read-only?): $!" if $status;

    foreach ( glob "$tmpdir/*" ) {
        ($pkgname) = (/([\w\+-\.]+)$/) if (-d);
    }

    open( my $FILE, '<', "$tmpdir/$pkgname/pkginfo" )
      || die "Could not open $tmpdir/$pkgname/pkginfo: $!";

    while ( my $line = <$FILE> ) {
        chomp $line;

        # Field 1: common name
        if ( $line =~ /^NAME=/ ) {
            $name = $';
            ( $description, $common ) = ( $line =~ /=((.+?)\s.*)/ );
            next;
        }

        # Field 2: version
        if ( $line =~ /^VERSION=/ ) {
            ($version) = ( $line =~ /=(.+)$/ );
            next;
        }

        # Field 3: package name
        if ( $line =~ /^PKG=/ ) {
            ($package) = ( $line =~ /=(.+)$/ );
            next;
        }

        # Field 4: filename
        if ( !$pkgfile ) {
            ($pkgfile) = ( $file =~ /\// ) ? ( $file =~ /.*\/(.+)$/ ) : $file;
        }

        # Field 5: md5 hash
        # Already computed

        # Field 6: file size
        # Already computed

        # Field 8: categories
        if ( $line =~ /^CSW_CATEGORY=/ ) {
            ($category) = ( $line =~ /=(.+)$/ );
            $category = join( '|', split( /,\s?/, $category ) );
            next;
        }
    }
    close $FILE;

    # Provide sane default values
    $common = $name unless $common;
    $description = "$common - no description" unless $description;

    # Field 7 and 9: dependencies
    $deps = $ideps = "";
    if ( -r "$tmpdir/$pkgname/install/depend" ) {
        open( my $FILE, '<', "$tmpdir/$pkgname/install/depend" );
        while (<$FILE>) {
            chomp;

            # Check if the next line is \s+(arch)vers
            my $peek    = <$FILE>;
            my $hasvers = 0;
            $hasvers = $peek =~ /^\s+/ if $peek;

            if (/^P\s+\S/) {
                ($deptmp) = (/P\s+(\S+)/);
                if ( $deptmp ne $pkgname && $deptmp !~ /^SUNW/ )
                {    # Skip if circular or SUNW
                    $deps = ($deps) ? "$deps|$deptmp" : $deptmp;
                }
            }
            if (/^I\s+\S/) {
                ($ideptmp) = (/I\s+(\S+)/);
                if ( $ideptmp ne $pkgname && $ideptmp !~ /^SUNW/ && !$hasvers )
                {    # Skip if circular or SUNW or unsupported version req.
                    $ideps = ($ideps) ? "$ideps|$ideptmp" : $ideptmp;
                }
            }

            # If there wasn't a version line, reparse the peek line
            if ( $peek && !$hasvers ) {
                $_ = $peek;
                redo;
            }
        }
        close $FILE;
    }

    $deps     = "none" unless $deps;
    $category = "none" unless $category;
    $ideps    = "none" unless $ideps;
    print $CATALOG
      "$common $version $package $pkgfile $hash $size $deps $category";
    print $CATALOG ( $format == 9 ) ? " $ideps\n" : "\n";
    print $DESCRIPTIONS "$description\n";
}

close $DESCRIPTIONS;
close $CATALOG;

unlink "$pkgdir/descriptions";    # May or may not be there
link "$pkgdir/descriptions.new", "$pkgdir/descriptions"
  or die "Cannot link $pkgdir/descriptions.new to $pkgdir/descriptions: $!";
unlink "$pkgdir/descriptions.new"
  or die "Cannot unlink $pkgdir/descriptions.new: $!";

unlink "$pkgdir/catalog";         # May or may not be there
link "$pkgdir/catalog.new", "$pkgdir/catalog"
  or die "Cannot link $pkgdir/catalog.new to $pkgdir/catalog: $!";
unlink "$pkgdir/catalog.new" or die "Cannot unlink $pkgdir/catalog.new: $!";

exit 0;

=head1 NAME

bldcat - build a CSW catalog from packages in a directory.

=head1 SYNOPSIS

bldcat [-fFWpqh] <package dir>

=head1 DESCRIPTION

Build a CSW catalog from packages in a directory.

=head1 OPTIONS

=over 5

=item B<-f, --format=x>

Set catalog format. Use 8 for the old 8-field format and 9 for the new 9-field format including incompatible packages. Default is 9.

=item B<-F, --fast>

Make timesaving assumptions. Usually bldcat guarantees to produce working catalogs, no matter what you throw in. This requires computing checksums for each package to see if it has changed. Using --fast assumes that if the filename and size has not been changed the checksum hasn't either.

=item B<-W, --workdir=x>

Set work directory. Default /var/tmp.

=item B<-p, --param=x>

Add site features to the top of catalog. Currently timestamp is supported, other values are simply put in as key/value pairs. To add a timestamp to the catalog, use --param=timestamp. To specify, e.g., the releasename, use a colon to separate the actual value from the key, e.g. --param=RELEASE:testing.

=item B<-q, --quiet>

No output.

=item B<-h, --help>

Show this help.

=back

=head1 EXAMPLES

=head2 Example 1

C<# bldcat .>

Will build a catalog from packages in the current directory.

=head1 SEE ALSO

http://pkgutil.net

http://sourceforge.net/projects/pkgutil

=head1 AUTHOR

Peter Bonivart <bonivart@opencsw.org>

=head1 CREDITS

Maciej Blizinski

Dominic Cleal

Dagobert Michelsen

Derek Whayman

For more details, see the readme file.

=head1 COPYRIGHT AND DISCLAIMER

Copyright (C) 2008-2012 Peter Bonivart. This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA.

=cut

