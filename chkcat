#!/usr/bin/env perl -w

# chkcat - check that a CSW catalog is consistent
# Copyright (C) 2008-2012 Peter Bonivart

# $Id$

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA.
#
# The author, Peter Bonivart, can be contacted by email at bonivart@opencsw.org

use strict;
use Getopt::Long;
Getopt::Long::Configure qw(no_ignore_case bundling);

eval { require Digest::MD5; };
die
"\nDigest::MD5 not available! Install CSWperl and use that\nfor chkcat. Do that by having /opt/csw/bin before\n/usr/bin in your path.\n"
  if ($@);

eval { require File::Temp; };
die
"\nFile::Temp not available! Install CSWperl and use that\nfor chkcat. Do that by having /opt/csw/bin before\n/usr/bin in your path.\n"
  if ($@);

my @pkglist;
my (
    $verbose, $hash,  $status,    $deps,   $deptmp,   $cat,
    $help,    $quiet, $erroronly, $pkgver, $nocyclic, $parse
);
my ( %pkg, %pkgdep, %config, %deps );
my $rc = 0;

GetOptions(
    "v|verbose"   => \$verbose,
    "h|help"      => \$help,
    "q|quiet"     => \$quiet,
    "c|nocyclic"  => \$nocyclic,
    "e|erroronly" => \$erroronly,
    "p|parse"     => \$parse
) || usage();

usage() if $help;
usage() unless ( scalar(@ARGV) > 0 );

sub usage {
    print <<EOF;
chkcat, check CSW catalogs for problems.

Usage: chkcat [-veqcph] <catalog file>...

  -v, --verbose\t\tVerbose mode
  -e, --erroronly\tSuppress displaying warnings
  -q, --quiet\t\tNo output (only exit codes)
  -c, --nocyclic\tNo cyclic dependency checking (Legacy, ignored)
  -p, --parse\t\tMachine parsable output
  -h, --help\t\tShow this help

Exit codes: 0 - OK, 1 - Warning, 2 - Error.

Written and maintained by Peter Bonivart.
EOF
    exit 0;
}

sub init {
    my $conf = "/etc/opt/csw/pkgutil.conf";
    if ( -r $conf ) {
        %config = ( "maxpkglist" => "" );

        open( my $CONFIG, '<', "$conf" ) or die "Can't open $conf: $!\n";
        while (<$CONFIG>) {
            chomp;       # Remove newline
            s/#.*//;     # Remove comments
            s/^\s+//;    # Remove leading white
            s/\s+$//;    # Remove trailing white
            next unless length;    # Next if nothing left
            my ( $var, $value ) = split( /\s*=\s*/, $_, 2 );
            my $r = ref( $config{$var} );
            if ( !$r ) {
                $config{$var} = $value;
            }
            elsif ( $r eq 'ARRAY' ) {
                push( @{ $config{$var} }, $value );
            }
        }
        close $CONFIG;
    }
}

sub retcode {
    my ($rctmp) = @_;

    $rc = $rctmp if ( $rctmp > $rc );
}

sub deppkgs {
    my ($pkg) = @_;

    if( !exists $deps{$pkg} ) {
        $deps{$pkg} = {};

        my @direct_deps = ($pkgdep{$pkg} eq "none" ? () : split(/\|/,$pkgdep{$pkg}));
        foreach my $dd (@direct_deps) {
            next if( exists $deps{$pkg}{$dd} );
            $deps{$pkg}{$dd} = [];
            my $d = deppkgs( $dd );
            foreach my $di (keys %$d) {
              $deps{$pkg}{$di} = [ $dd, @{$d->{$di}} ];
            }
        }
    }
    return $deps{$pkg};
}

# Read configuration file (/etc/opt/csw/pkgutil.conf)
init();

foreach (@ARGV) {
    ( -r $_ ) || die "Can't open $_";    # Must be a readable file

    my (@catalog) = `cat $_`;

    my $prefix = ".";
    ($prefix) = ( $_ =~ /^(.+)\// ) if ( $verbose && $_ =~ /\// );

    # Read up all packages in a hash plus all deps in another hash
    while ( scalar(@catalog) > 0 ) {
        my $line = $catalog[0];
        shift @catalog;
        chomp $line;
        if ( $line =~ /-BEGIN PGP SIGNED MESSAGE-/ ) {
            shift @catalog;
            shift @catalog;
            next;
        }
        last if ( $line =~ /-BEGIN PGP SIGNATURE-/ );
        next if ( $line =~ /^#/ );
        my @line = split( /\s+/, $line );
        next unless ( scalar(@line) == 8 || scalar(@line) == 9 );
        $pkg{ $line[2] } = $prefix if ( $line[2] =~ /\w+/ );
        $pkgdep{ $line[2] } = $line[6];
    }
}

my @tmp;
foreach (@ARGV) {
    ( -r $_ ) || die "Can't open $_";    # Must be a readable file
    push( @tmp, `cat $_` );
}

while ( scalar(@tmp) > 0 ) {
    my $line = $tmp[0];
    shift @tmp;
    chomp $line;
    my (@field) = split( / /, $line );

    # If gpg signed catalog, skip a few lines in the beginning
    if ( $line =~ /-BEGIN PGP SIGNED MESSAGE-/ ) {
        print "Skipping signature at start of file.\n"
          unless ( $erroronly || $quiet || $parse );
        shift @tmp;
        shift @tmp;
        next;
    }

    # If gpg signature found at the end, exit
    if ( $line =~ /-BEGIN PGP SIGNATURE-/ ) {
        print "\nSkipping signature at end of file.\n"
          unless ( $erroronly || $quiet || $parse );
        last;
    }

    # If line starts with a comment, skip
    if ( $line =~ /^#/ ) {
        print "Skipping comment.\n" unless ( $erroronly || $quiet || $parse );
        next;
    }

    # Number of fields
    if ( scalar(@field) < 8 || scalar(@field) > 9 ) {
        retcode(2);
        if ( !$quiet ) {
            if ($parse) {
                print "ERROR\t1\t$field[2]\t", scalar(@field),
                  " fields instead of normal 8 or 9\n";
            }
            else {
                print "\nERROR! ", scalar(@field),
                  " fields instead of normal 8 or 9. [$line]\n";
            }
        }
        next;
    }

    # Packages that are not compressed, normal for gzip and pkg-get
    if ( $field[3] !~ /\.gz$/ ) {
        retcode(1) unless $erroronly;
        if ( !$erroronly && !$quiet ) {
            if ($parse) {
                print
"WARNING\t2\t$field[2]\tPackage $field[2] is not compressed\n";
            }
            else {
                print
                  "\nWARNING! Package $field[2] is not compressed. [$line]\n";
            }
        }
    }

    # Packages that should not be compressed - common and gzip
    if ( $field[2] eq "CSWcommon" || $field[2] eq "CSWgzip" ) {
        if ( $field[3] =~ /\.gz$/ ) {
            retcode(2);
            if ( !$quiet ) {
                if ($parse) {
                    print
                      "ERROR\t3\t$field[2]\tPackage $field[2] is compressed\n";
                }
                else {
                    print "\nERROR! Package $field[2] is compressed. [$line]\n";
                }
            }
        }
    }

    # Check the naming standard - http://opencsw.org/standards/build#versioning
    my ( $name, $version, $uname, $arch, $footer, $rest ) = split /-/,
      $field[3];
    if ( !$footer && $arch ) {

        # Assume arch is missing - it is optional after all
        $footer = $arch;
        $arch   = '';
    }

    if ( $arch && ( $arch ne 'i386' && $arch ne 'sparc' && $arch ne 'all' ) ) {
        retcode(1) unless $erroronly;
        if ( !$erroronly && !$quiet ) {
            if ($parse) {
                print
"WARNING\t4\t$field[2]\tPackage $field[2] has an unknown architecture\n";
            }
            else {
                print
"\nWARNING! Package $field[2] has an unknown architecture. [$line]\n";
            }
        }
    }

    if ($rest) {
        retcode(1) unless $erroronly;
        if ( !$erroronly && !$quiet ) {
            if ($parse) {
                print
"WARNING\t5\t$field[2]\tPackage $field[2] does not meet the CSW naming standard - too many hyphens\n";
            }
            else {
                print
"\nWARNING! Package $field[2] does not meet the CSW naming standard - too many hyphens. [$line]\n";
            }
        }
    }

    if ( $field[3] !~ /\.pkg(\.gz)?$/ ) {
        retcode(1) unless $erroronly;
        if ( !$erroronly && !$quiet ) {
            if ($parse) {
                print
"WARNING\t6\t$field[2]\tPackage $field[2] does not meet the CSW naming standard - should end in .pkg(.gz)\n";
            }
            else {
                print
"\nWARNING! Package $field[2] does not meet the CSW naming standard - should end in .pkg(.gz). [$line]\n";
            }
        }
    }

    if ( !$version || $version !~ /[0-9\.]+,REV=(\d{4})\.(\d{2})\.(\d{2})/ ) {
        retcode(1) unless $erroronly;
        if ( !$erroronly && !$quiet ) {
            if ($parse) {
                print
"WARNING\t7\t$field[2]\tPackage $field[2] does not meet the CSW naming standard - REV section incorrect\n";
            }
            else {
                print
"\nWARNING! Package $field[2] does not meet the CSW naming standard - REV section incorrect. [$line]\n";
            }
        }
    }

    # Check that dependency field begins and ends with a word char
    if ( $field[6] !~ /^\w/ ) {
        retcode(2);
        if ( !$quiet ) {
            if ($parse) {
                print
"ERROR\t8\t$field[2]\tThe dependency field of package $field[2] begins with a non-char\n";
            }
            else {
                print
"\nERROR! The dependency field of package $field[2] begins with a non-char. [$line]\n";
            }
        }
    }
    if ( $field[6] =~ /\|$/ ) {    # Non-char is actually used, e.g. gcc2g++
        retcode(2);
        if ( !$quiet ) {
            if ($parse) {
                print
"ERROR\t9\t$field[2]\tThe dependency field of package $field[2] ends with a pipe char\n";
            }
            else {
                print
"\nERROR! The dependency field of package $field[2] ends with a pipe char. [$line]\n";
            }
        }
    }

    # Check for SUNW dependencies
    if ( $field[6] =~ /SUNW/ ) {
        retcode(1) unless $erroronly;
        if ( !$erroronly && !$quiet ) {
            if ($parse) {
                print
"WARNING\t10\t$field[2]\tThe dependency field of package $field[2] contains SUNW packages\n";
            }
            else {
                print
"\nWARNING! The dependency field of package $field[2] contains SUNW packages. [$line]\n";
            }
        }
    }

    # Check that no dependencies are missing
    if ( $field[6] ne "none" ) {
        foreach ( split( /\|/, $field[6] ) ) {
            if ( !$pkg{$_} ) {
                retcode(2);
                if ($parse) {
                    print
"ERROR\t11\t$field[2]\tDependency $_ of package $field[2] is missing\n"
                      unless $quiet;
                }
                else {
                    print
"\nERROR! Dependency $_ of package $field[2] is missing.\n"
                      unless $quiet;
                }
            }
        }
    }

    # Check for packages that depend on themselves
    if ( $field[6] ne "none" ) {
        foreach ( split( /\|/, $field[6] ) ) {
            if ( $_ eq $field[2] ) {
                retcode(2);
                if ($parse) {
                    print
"ERROR\t12\t$field[2]\tPackage $field[2] depends on itself\n"
                      unless $quiet;
                }
                else {
                    print "\nERROR! Package $field[2] depends on itself.\n"
                      unless $quiet;
                }
            }
        }
    }

    # Check for cyclic dependencies
    if ($field[6] ne "none") {
        my $d = deppkgs( $field[2] );
        if( exists $d->{$field[2]} ) {
            retcode(2);
            if ($parse) {
                print
"ERROR\t13\t$field[2]\tCyclic dependency detected in package $field[2] because of " . join( ":", $field[2], @{$d->{$field[2]}}, $field[2] ) . "\n"
                unless $quiet;
            }
            else {
                print
"ERROR! Cyclic dependency detected in package $field[2] because of " . join( " -> ", $field[2], @{$d->{$field[2]}}, $field[2] ) . ".\n"
                unless $quiet;
            }
        }
    }

    # Check that category field begins and ends with a word char
    if ( $field[7] !~ /^\w/ ) {
        retcode(2);
        if ( !$quiet ) {
            if ($parse) {
                print
"ERROR\t15\t$field[2]\tThe category field of package $field[2] begins with a non-char\n";
            }
            else {
                print
"\nERROR! The category field of package $field[2] begins with a non-char. [$line]\n";
            }
        }
    }
    if ( $field[7] !~ /\w$/ ) {
        retcode(2);
        if ( !$quiet ) {
            if ($parse) {
                print
"ERROR\t16\t$field[2]\tThe category field of package $field[2] ends with a non-char\n";
            }
            else {
                print
"\nERROR! The category field of package $field[2] ends with a non-char. [$line]\n";
            }
        }
    }

    # If in verbose mode, check catalog entries against packages if found in
    # same directory as catalog
    if ($verbose) {
        if ( !-r "$pkg{$field[2]}/$field[3]" ) {    # Does the file exist?
            retcode(2);
            if ($parse) {
                print "ERROR\t17\t$field[2]\tFile $field[3] not found\n"
                  unless $quiet;
            }
            else {
                print "ERROR! File $field[3] not found.\n" unless $quiet;
            }
        }
        else {
            if ( $field[5] != ( stat("$pkg{$field[2]}/$field[3]") )[7] )
            {                                       # Correct size?
                retcode(2);
                if ($parse) {
                    print
"ERROR\t18\t$field[2]\tSize does not match for $field[2]\n"
                      unless $quiet;
                }
                else {
                    print "ERROR! Size does not match for $field[2].\n"
                      unless $quiet;
                }
            }
            open( my $FILE, '<', "$pkg{$field[2]}/$field[3]" );    # MD5 check
            binmode($FILE);
            $hash = Digest::MD5->new->addfile($FILE)->hexdigest;
            close $FILE;
            if ( $hash ne $field[4] ) {
                retcode(2);
                if ($parse) {
                    print
"ERROR\t19\t$field[2]\tMD5 hash does not match for $field[2]\n"
                      unless $quiet;
                }
                else {
                    print "ERROR! MD5 hash does not match for $field[2].\n"
                      unless $quiet;
                }
            }

            # Unpack package if depends and/or categories are not "none"
            my $tmpdir = File::Temp::tempdir( DIR => "/tmp", CLEANUP => 1 );
            $status = system(
"/bin/gunzip -cf $pkg{$field[2]}/$field[3] | /bin/pkgtrans /dev/fd/0 $tmpdir all 2> /dev/null"
            );
            die "Could not transform $field[2]: $!" if $status;

            # Check deps against depend file in package
            if ( $field[6] ne "none" ) {
                $deps = "";
                if ( -r "$tmpdir/$field[2]/install/depend" ) {
                    open( my $FILE, '<', "$tmpdir/$field[2]/install/depend" );
                    while (<$FILE>) {
                        chomp;
                        if (/^P\s+\w/) {
                            ($deptmp) = (/P\s+([\w\+-]+)/);
                            $deps = ($deps) ? "$deps|$deptmp" : $deptmp;
                        }
                    }
                    close $FILE;
                }
                else {
                    print "No depend file found in $field[2]\n" unless $quiet;
                }
                if ( $deps ne $field[6] ) {
                    retcode(2);
                    if ($parse) {
                        print
"ERROR\t20\t$field[2]\tDependencies does not match for $field[2]\n"
                          unless $quiet;
                    }
                    else {
                        print
                          "ERROR! Dependencies does not match for $field[2].\n"
                          unless $quiet;
                    }
                }
            }

            # Check categories against pkginfo file in package
            if ( $field[7] ne "none" ) {
                $pkgver = "";
                $cat    = "";
                open( my $FILE, '<', "$tmpdir/$field[2]/pkginfo" );
                while (<$FILE>) {
                    chomp;
                    if (/^CSW_CATEGORY=/) {
                        ($cat) = (/=(.+)$/) if (/^CSW_CATEGORY=/);
                        $cat = join( '|', split( /,\s?/, $cat ) );
                    }
                    elsif (/^VERSION=(\S+)/) {
                        $pkgver = $1;
                    }
                    last if $cat && $pkgver;
                }
                close $FILE;
            }

            if ( $field[7] ne "none" ) {
                if ( $cat ne $field[7] ) {
                    retcode(2);
                    if ($parse) {
                        print
"ERROR\t21\t$field[2]\tCategories does not match for $field[2]\n"
                          unless $quiet;
                    }
                    else {
                        print
                          "ERROR! Categories does not match for $field[2].\n"
                          unless $quiet;
                    }
                }
            }

            # Check version field matches filename
            if ( $pkgver && $version && $pkgver ne $version ) {
                retcode(2);
                if ($parse) {
                    print
"ERROR\t22\t$field[2]\tVersion in filename doesn't match version in pkginfo for $field[2]\n"
                      unless $quiet;
                }
                else {
                    print
"ERROR! Version in filename doesn't match version in pkginfo for $field[2].\n"
                      unless $quiet;
                }
            }
        }
    }

    # Add package to array for later duplicate check
    push( @pkglist, $field[2] );
}

my @tmplist = sort(@pkglist);
my $dup     = "";
while ( scalar(@tmplist) > 1 ) {   # No need to check for dups if only one entry
    my $tmp = $tmplist[0];
    shift @tmplist;
    if ( $tmp eq $tmplist[0] && $dup ne $tmp ) {
        retcode(2);
        if ($parse) {
            print "ERROR\t23\t$tmp\t$tmp exists more than once\n" unless $quiet;
        }
        else {
            print "ERROR! $tmp exists more than once.\n" unless $quiet;
        }
        $dup = $tmp;
    }
}

exit $rc;

=head1 NAME

chkcat - check CSW catalog for problems

=head1 SYNOPSIS

chkcat [-veqcph] <catalog file>...

=head1 DESCRIPTION

Check CSW catalog for problems.

=head1 OPTIONS

=over 5

=item B<-v, --verbose>

Verbose mode. Will compare size, MD5 hash, dependencies and categories specified in catalog against the information in the actual package. The packages must be in the same directory as the catalog referencing them.

=item B<-e, --erroronly>

Only show errors (suppress warnings).

=item B<-q, --quiet>

No output (only exit codes).

=item B<-c, --nocyclic>

This is a legacy option, please remove it from scripts as it will go away in the next version.

=item B<-p, --parse>

Machine parsable output. No headers printed and all columns separated by one tab.

=item B<-h, --help>

Show this help.

=back

=head1 EXAMPLES

=head2 Example 1

C<# chkcat catalog>

Will check catalog for problems.

=head2 Example 2

C<# chkcat -q catalog>

Will supress all output and only generate an exit code, 0 for OK, 1 for warnings found and 2 for errors found. This is recommended for use in scripts.

=head1 EXIT CODES

The following exit codes are returned:

	0	OK

	1	Warning

	2	Error

=head1 SEE ALSO

http://pkgutil.net

http://sourceforge.net/projects/pkgutil

=head1 AUTHOR

Peter Bonivart <bonivart@opencsw.org>

=head1 CREDITS

Dagobert Michelsen

Derek Whayman

For more details, see the readme file.

=head1 COPYRIGHT AND DISCLAIMER

Copyright (C) 2008-2012 Peter Bonivart. This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA.

=cut

